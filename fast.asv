% Load model
[V, F] = readOBJ("Tests\cow.obj");

%t = tsurf(F, V);

[P, H] = farthest_points(V, 10);

W = biharmonic_bounded(V, F, H, eye(size(H,1)));

%vis_weights(V, F, W);

% Rotation matrix for 45 degrees about the x-axis
R = [1, 0, 0; 
     0, cosd(45), -sind(45); 
     0, sind(45), cosd(45)];

% Translation vector
t = transpose([10, 20, 30]);

% Constructing the affine transformation matrix
T = [R, t; 
     0, 0, 0, 1];

m = 10;

C = zeros(16, m);

for j = 1:m
    T_j = T;
    c_j = reshape(T_j, 16, 1);

    C(:, j) = c_j;
end

 A = adjacency_matrix(F); % The adjacency matrix of the mesh
D = diag(sum(A, 2)); % Degree matrix, diagonal matrix
Ln = D - A; % Laplacian matrix

V_prime = FAST(V, F, W, C, Ln);

tsurf(F, V_prime);

function vis_weights(V, F, W)
    t = tsurf(F, V, 'CData', W(:, 1));

    for i = 2:size(W, 2)
        t.CData = W(:, i);
    end
end

function V_prime = FAST(V, F, W, C, Ln)
   n = size(V, 1);
   m = size(C, 2);
   d = size(V, 2);

   M = zeros(n, (d+1)*m);
   
   for i = 1:n
       for j = 1:m
           M(i, (j-1)*(d+1)+(1:d)) = W(i, j) * V(i, :);
           M(i, j*(d+1)) = W(i, j);
       end
   end

   L = cotangent(V, F);

   r = size(W, 2);

   K = zeros(d*r, n);

   %for i = 1:r
       %C_i = C(i, :, :);

       %K_temp = L * reshape(C_i, [d, d]) .* W(:, i);

       %K((i-1)*(d+1):i*d, :) = K_temp;
   %end

   % Local-Global Optimization

   % Initialising the transformed vertices as the rest-positions
   T = V;

   % Set an epsilon tolerance value
   epsilon = 1e-6;
   delta = epsilon + 1;

   while delta > epsilon
        T_prev = T;

        S = zeros(n*d, d);

        CSM = covariance_scatter_matrix(V,F,'Energy',energy);
        MLBS = lbs_matrix(V,W);
        
        CSM_MLBS = cell(dim,1);
          for ii = 1:d
            %CSM_MLBS{ii} = CSM*repmat(MLBS((ii-1)*n+(1:n),:),dim,1);
            CSM_MLBS{ii} = sparse(size(CSM,1),size(MLBS,2));
            Mi = MLBS((ii-1)*n+(1:n),:);
            for jj = 1:d
              CSM_MLBS{ii}((jj-1)*k+(1:k),:) = ...
                CSM((jj-1)*k+(1:k),(jj-1)*n+(1:n)) * ...
                Mi;
            end
          end

   end  

   V_prime = M * T;
end

%% TEMP

%% Initialise a matrix of rest-pose vertex positions of the input mesh
% % n is the number of vertices and d is the dimension of the mesh, 2 or 3
%v = zeros(n, d);

%% Set of control handles of size m
%H = zeros(m);

%% Array of weight functions for linear blend skinning
%W = zeros(m); 

%% Constructing the Matrix M for calculation of new vertex positions through
%% LBS

%vp = [v ones(n, 1)];
%M = [];
%for j = 1:m
%    mult = rowfun(@W[j], v);
%    M = [M vp.*mult];
%end

%% Affine transformations for each handle in H
%T = zeros(d, d + 1, m);
%% There are m transformation matrices, one for each transformation for each
%% handle. Each transformation matrix is of size d x (d + 1).
%T = reshape(T, [d, (d+1)*m]);
%T = transpose(T);

%V_prime = M*T;